// ============================================
// services/adminUserService.js
// ============================================

import UserModel from '../models/User.model.js';
import cryptoService from './cryptoService.js';

class AdminUserService {

    // ==================== –ü–û–õ–£–ß–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ====================

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
     * @param {Object} options - –æ–ø—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
     * @returns {Object} - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
     */
    async getAllUsers(options = {}) {
        try {
            const {
                page = 1,
                limit = 20,
                role = null,
                search = null,
                isBlocked = null,
                sortBy = 'createdAt',
                sortOrder = -1
            } = options;

            const skip = (page - 1) * limit;

            // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
            const filter = {};

            // –§–∏–ª—å—Ç—Ä –ø–æ —Ä–æ–ª–∏
            if (role && ['user', 'author', 'admin'].includes(role)) {
                filter.role = role;
            }

            // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            if (isBlocked !== null) {
                filter['isBlocked.status'] = isBlocked === 'true' || isBlocked === true;
            }

            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if (search && search.trim()) {
                // –ü–æ–ª—É—á–∞–µ–º –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –Ω–∞ —É—Ä–æ–≤–Ω–µ JavaScript
                // –≠—Ç–æ –Ω–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è –±–æ–ª—å—à–∏—Ö –±–∞–∑, –Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                const allUsers = await UserModel.find(filter)
                    .select('-__v')
                    .sort({ [sortBy]: sortOrder });

                // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º
                const decryptedUsers = [];
                for (const user of allUsers) {
                    await cryptoService.smartDecrypt(user);
                    const userData = this.formatUserResponse(user);

                    // –ü–æ–∏—Å–∫ –ø–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
                    const searchLower = search.toLowerCase();
                    if (
                        userData.firstName?.toLowerCase().includes(searchLower) ||
                        userData.lastName?.toLowerCase().includes(searchLower) ||
                        userData.email?.toLowerCase().includes(searchLower) ||
                        userData.displayName?.toLowerCase().includes(searchLower)
                    ) {
                        decryptedUsers.push(userData);
                    }
                }

                // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
                const startIndex = skip;
                const endIndex = skip + parseInt(limit);
                const paginatedUsers = decryptedUsers.slice(startIndex, endIndex);

                return {
                    users: paginatedUsers,
                    pagination: {
                        total: decryptedUsers.length,
                        page: parseInt(page),
                        pages: Math.ceil(decryptedUsers.length / limit),
                        limit: parseInt(limit)
                    }
                };
            }

            // –û–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ –ø–æ–∏—Å–∫–∞
            const users = await UserModel.find(filter)
                .select('-__v')
                .sort({ [sortBy]: sortOrder })
                .skip(skip)
                .limit(parseInt(limit));

            // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            const total = await UserModel.countDocuments(filter);

            // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            for (const user of users) {
                await cryptoService.smartDecrypt(user);
            }

            return {
                users: users.map(user => this.formatUserResponse(user)),
                pagination: {
                    total,
                    page: parseInt(page),
                    pages: Math.ceil(total / limit),
                    limit: parseInt(limit)
                }
            };

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
     * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Object} - –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async getUserById(userId) {
        try {
            const user = await UserModel.findById(userId).select('-__v');

            if (!user) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            await cryptoService.smartDecrypt(user);
            return this.formatUserResponse(user);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥)
     * @param {string} query - –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
     * @param {Object} options - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
     * @returns {Array} - –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
     */
    async searchUsers(query, options = {}) {
        try {
            const { limit = 10, role = null } = options;

            // –ë–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä
            const filter = {};
            if (role && ['user', 'author', 'admin'].includes(role)) {
                filter.role = role;
            }

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –Ω–∞ JS
            const users = await UserModel.find(filter)
                .select('-__v')
                .limit(parseInt(limit));

            // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º
            const decryptedUsers = [];
            for (const user of users) {
                await cryptoService.smartDecrypt(user);
                const userData = this.formatUserResponse(user);

                const searchLower = query.toLowerCase();
                if (
                    userData.firstName?.toLowerCase().includes(searchLower) ||
                    userData.lastName?.toLowerCase().includes(searchLower) ||
                    userData.email?.toLowerCase().includes(searchLower) ||
                    userData.displayName?.toLowerCase().includes(searchLower)
                ) {
                    decryptedUsers.push(userData);
                }
            }

            return decryptedUsers;

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
            throw error;
        }
    }

    // ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–õ–û–ö–ò–†–û–í–ö–ê–ú–ò ====================

    /**
     * –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
     * @param {Object} blockData - –¥–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
     * @param {string} adminId - ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
     * @returns {Object} - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     */
    async blockUser(userId, blockData, adminId) {
        try {
            const { reason, until = null } = blockData;

            const user = await UserModel.findById(userId);
            if (!user) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            // –ù–µ–ª—å–∑—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
            if (userId === adminId) {
                throw new Error('–ù–µ–ª—å–∑—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è');
            }

            // –ù–µ–ª—å–∑—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–¥–º–∏–Ω–∞ (–∑–∞—â–∏—Ç–∞)
            if (user.role === 'admin') {
                throw new Error('–ù–µ–ª—å–∑—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —É–∂–µ
            if (user.isBlocked.status) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            user.isBlocked = {
                status: true,
                until: until ? new Date(until) : null,
                reason: reason || '–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª',
                blockedBy: adminId
            };

            await user.save();
            console.log(`üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.email} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (Admin: ${adminId})`);

            await cryptoService.smartDecrypt(user);
            return this.formatUserResponse(user);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            throw error;
        }
    }

    /**
     * –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {string} adminId - ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
     * @returns {Object} - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     */
    async unblockUser(userId, adminId) {
        try {
            const user = await UserModel.findById(userId);
            if (!user) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
            if (!user.isBlocked.status) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
            }

            // –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            user.isBlocked = {
                status: false,
                until: null,
                reason: '',
                blockedBy: null
            };

            await user.save();
            console.log(`üîì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.email} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (Admin: ${adminId})`);

            await cryptoService.smartDecrypt(user);
            return this.formatUserResponse(user);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            throw error;
        }
    }

    // ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–û–õ–Ø–ú–ò ====================

    /**
     * –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {string} newRole - –Ω–æ–≤–∞—è —Ä–æ–ª—å (user –∏–ª–∏ author)
     * @param {string} adminId - ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
     * @returns {Object} - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     */
    async changeUserRole(userId, newRole, adminId) {
        try {
            const user = await UserModel.findById(userId);
            if (!user) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–≤–æ–π —Ä–æ–ª–∏ - –¢–û–õ–¨–ö–û user –∏–ª–∏ author
            const validRoles = ['user', 'author'];
            if (!validRoles.includes(newRole)) {
                throw new Error(`–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ä–æ–ª—å. –†–∞–∑—Ä–µ—à–µ–Ω—ã: ${validRoles.join(', ')}`);
            }

            // –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å —Å–∞–º–æ–º—É —Å–µ–±–µ
            if (userId === adminId) {
                throw new Error('–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–æ–ª—å');
            }

            // –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if (user.role === 'admin') {
                throw new Error('–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–æ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –º–µ–Ω—è–µ—Ç—Å—è
            if (user.role === newRole) {
                throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç —Ä–æ–ª—å ${newRole}`);
            }

            const oldRole = user.role;
            user.role = newRole;
            await user.save();

            console.log(`üîÑ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.email} –∏–∑–º–µ–Ω–µ–Ω–∞: ${oldRole} ‚Üí ${newRole} (Admin: ${adminId})`);

            await cryptoService.smartDecrypt(user);
            return this.formatUserResponse(user);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏:', error);
            throw error;
        }
    }

    // ==================== –£–î–ê–õ–ï–ù–ò–ï ====================

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ - –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞)
     * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {string} adminId - ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
     * @returns {Object} - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
     */
    async deleteUser(userId, adminId) {
        try {
            const user = await UserModel.findById(userId);
            if (!user) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            // –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
            if (userId === adminId) {
                throw new Error('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è');
            }

            // –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–¥–º–∏–Ω–∞
            if (user.role === 'admin') {
                throw new Error('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
            }

            // –í–º–µ—Å—Ç–æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è - –±–ª–æ–∫–∏—Ä—É–µ–º –Ω–∞–≤—Å–µ–≥–¥–∞
            user.isBlocked = {
                status: true,
                until: null, // –ù–∞–≤—Å–µ–≥–¥–∞
                reason: '–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º',
                blockedBy: adminId
            };

            await user.save();
            console.log(`üóëÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.email} —É–¥–∞–ª–µ–Ω (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞) (Admin: ${adminId})`);

            return {
                success: true,
                message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
            };

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            throw error;
        }
    }

    // ==================== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ====================

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     * @returns {Object} - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
     */
    async getUserStatistics() {
        try {
            const totalUsers = await UserModel.countDocuments();
            const totalBlocked = await UserModel.countDocuments({ 'isBlocked.status': true });

            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–æ–ª—è–º
            const roleStats = await UserModel.aggregate([
                {
                    $group: {
                        _id: '$role',
                        count: { $sum: 1 }
                    }
                }
            ]);

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            const roles = {
                user: 0,
                author: 0,
                admin: 0
            };

            roleStats.forEach(stat => {
                roles[stat._id] = stat.count;
            });

            // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
            const recentUsers = await UserModel.find()
                .select('email firstName lastName role createdAt')
                .sort({ createdAt: -1 })
                .limit(5);

            // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            for (const user of recentUsers) {
                await cryptoService.smartDecrypt(user);
            }

            return {
                total: totalUsers,
                blocked: totalBlocked,
                active: totalUsers - totalBlocked,
                roles,
                recentUsers: recentUsers.map(user => ({
                    id: user._id,
                    email: user.email,
                    name: `${user.firstName} ${user.lastName}`,
                    role: user.role,
                    createdAt: user.createdAt
                }))
            };

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            throw error;
        }
    }

    // ==================== –£–¢–ò–õ–ò–¢–´ ====================

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {Object} user - –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
     * @returns {Object} - –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     */
    formatUserResponse(user) {
        return {
            id: user._id,
            email: user.email,
            googleId: user.googleId,
            firstName: user.firstName,
            lastName: user.lastName,
            displayName: `${user.firstName} ${user.lastName}`,
            avatar: user.avatar,
            role: user.role,
            bio: user.bio,
            position: user.position,
            showInAuthorsList: user.showInAuthorsList,
            isBlocked: user.isBlocked,
            lastLogin: user.lastLogin,
            createdAt: user.createdAt,
            updatedAt: user.updatedAt
        };
    }
}

export default new AdminUserService();