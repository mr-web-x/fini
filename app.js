// app.js - –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è fini.sk
import express from 'express';
import cors from 'cors';
import mongoose from 'mongoose';
import dotenv from 'dotenv';
import logger from './middlewares/logger.js';
import config from './config/index.js';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è dotenv
dotenv.config();

// –°–æ–∑–¥–∞–Ω–∏–µ Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = express();

// ==================== MIDDLEWARE ====================

// CORS - —Ä–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å –∫–ª–∏–µ–Ω—Ç–∞
app.use(cors({
    origin: process.env.CLIENT_URL || 'http://localhost:3000',
    credentials: true
}));

// –ü–∞—Ä—Å–∏–Ω–≥ JSON
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
app.use(logger);

// ==================== ROUTES ====================

// –ó–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–µ—Ä–∞ (–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏)
app.get('/health', (req, res) => {
    res.status(200).json({
        success: true,
        message: 'fini.sk API —Ä–∞–±–æ—Ç–∞–µ—Ç',
        timestamp: new Date().toISOString(),
        uptime: process.uptime(),
        environment: config.NODE_ENV
    });
});

// –ö–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç
app.get('/', (req, res) => {
    res.status(200).json({
        success: true,
        message: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ fini.sk API',
        version: '1.0.0',
        endpoints: {
            health: '/health',
            api: '/api'
        }
    });
});

// API –º–∞—Ä—à—Ä—É—Ç—ã (–±—É–¥—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –ø–æ–∑–∂–µ)
// import routes from './routes/index.js';
// app.use('/api', routes);

// –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è API
app.use('/api', (req, res) => {
    res.status(200).json({
        success: true,
        message: 'API –º–∞—Ä—à—Ä—É—Ç—ã –±—É–¥—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –ø–æ–∑–∂–µ',
        requested: req.originalUrl
    });
});

// ==================== ERROR HANDLING ====================

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404 - –º–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
app.use((req, res) => {
    res.status(404).json({
        success: false,
        message: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
        path: req.originalUrl
    });
});

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
    console.error('‚ùå –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', err);

    const statusCode = err.statusCode || 500;
    const message = err.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';

    res.status(statusCode).json({
        success: false,
        message,
        ...(config.NODE_ENV === 'development' && {
            stack: err.stack,
            error: err
        })
    });
});

// ==================== DATABASE CONNECTION ====================

const connectDB = async () => {
    try {
        await mongoose.connect(config.MONGODB_URI, {
            // –û–ø—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            serverSelectionTimeoutMS: 5000,
            socketTimeoutMS: 45000,
        });

        console.log('‚úÖ MongoDB —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
        console.log(`üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${mongoose.connection.name}`);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error.message);
        process.exit(1); // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è MongoDB
mongoose.connection.on('disconnected', () => {
    console.warn('‚ö†Ô∏è MongoDB –æ—Ç–∫–ª—é—á–µ–Ω–∞');
});

mongoose.connection.on('error', (err) => {
    console.error('‚ùå MongoDB –æ—à–∏–±–∫–∞:', err);
});

// ==================== SERVER START ====================

const startServer = async () => {
    try {
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await connectDB();

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        const PORT = config.PORT || 10001;

        app.listen(PORT, () => {
            console.log('');
            console.log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
            console.log('‚ïë                                        ‚ïë');
            console.log(`‚ïë   üöÄ fini.sk API –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!    ‚ïë`);
            console.log('‚ïë                                        ‚ïë');
            console.log(`‚ïë   üìç –ü–æ—Ä—Ç: ${PORT}                        ‚ïë`);
            console.log(`‚ïë   üåç –û–∫—Ä—É–∂–µ–Ω–∏–µ: ${config.NODE_ENV.padEnd(19)} ‚ïë`);
            console.log(`‚ïë   üìÖ –í—Ä–µ–º—è: ${new Date().toLocaleTimeString('ru-RU').padEnd(19)} ‚ïë`);
            console.log('‚ïë                                        ‚ïë');
            console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù');
            console.log('');
            console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:');
            console.log(`   ‚Ä¢ Health Check: http://localhost:${PORT}/health`);
            console.log(`   ‚Ä¢ API Base: http://localhost:${PORT}/api`);
            console.log('');
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
        process.exit(1);
    }
};

// ==================== GRACEFUL SHUTDOWN ====================

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
const gracefulShutdown = async (signal) => {
    console.log(`\n‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...`);

    try {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB
        await mongoose.connection.close();
        console.log('‚úÖ MongoDB —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');

        console.log('üëã –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        process.exit(0);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã:', error);
        process.exit(1);
    }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
process.on('SIGINT', () => gracefulShutdown('SIGINT'));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π Promise
process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ Promise:', reason);
    console.error('Promise:', promise);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
process.on('uncaughtException', (error) => {
    console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
    process.exit(1);
});

// ==================== START APPLICATION ====================

startServer();

// –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)
export default app;