// ============================================
// server.js ‚Äî –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ fini.sk
// ============================================

import mongoose from 'mongoose';
import dotenv from 'dotenv';
import app from './app.js';
import config from './config/index.js';

// ==== –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ====
dotenv.config();

const PORT = config.PORT || 10001;

// ==================== DATABASE CONNECTION ====================

const connectDB = async () => {
    try {
        await mongoose.connect(config.MONGODB_URI, {
            serverSelectionTimeoutMS: 5000,
            socketTimeoutMS: 45000,
        });

        console.log('‚úÖ MongoDB —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
        console.log(`üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${mongoose.connection.name}`);

        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error.message);
        throw error;
    }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π MongoDB
mongoose.connection.on('disconnected', () => {
    console.warn('‚ö†Ô∏è MongoDB –æ—Ç–∫–ª—é—á–µ–Ω–∞');
});

mongoose.connection.on('error', (err) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ MongoDB:', err);
});

mongoose.connection.on('reconnected', () => {
    console.log('‚úÖ MongoDB –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
});

// ==================== SERVER START ====================

const startServer = async () => {
    try {
        // 1. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await connectDB();

        // 2. –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        const server = app.listen(PORT, () => {
            console.log('');
            console.log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
            console.log('‚ïë                                        ‚ïë');
            console.log('‚ïë      üöÄ fini.sk API –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!  ‚ïë');
            console.log('‚ïë                                        ‚ïë');
            console.log(`‚ïë   üìç –ü–æ—Ä—Ç: ${PORT.toString().padEnd(27)}‚ïë`);
            console.log(`‚ïë   üåç –û–∫—Ä—É–∂–µ–Ω–∏–µ: ${config.NODE_ENV.padEnd(19)} ‚ïë`);
            console.log(`‚ïë   üìÖ –í—Ä–µ–º—è: ${new Date().toLocaleTimeString('ru-RU').padEnd(19)} ‚ïë`);
            console.log('‚ïë                                        ‚ïë');
            console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù');
            console.log('');
            console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:');
            console.log(`   ‚Ä¢ Health Check: http://localhost:${PORT}/health`);
            console.log(`   ‚Ä¢ API Root:     http://localhost:${PORT}/`);
            console.log(`   ‚Ä¢ Auth API:     http://localhost:${PORT}/api/auth`);
            console.log('');
        });

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–µ—Ä–≤–µ—Ä –¥–ª—è graceful shutdown
        return server;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
        process.exit(1);
    }
};

// ==================== GRACEFUL SHUTDOWN ====================

const gracefulShutdown = (server) => async (signal) => {
    console.log(`\n‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...`);

    try {
        // 1. –ó–∞–∫—Ä—ã–≤–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä (–ø–µ—Ä–µ—Å—Ç–∞–µ–º –ø—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–æ–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è)
        await new Promise((resolve, reject) => {
            server.close((err) => {
                if (err) reject(err);
                else resolve();
            });
        });
        console.log('‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç');

        // 2. –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB
        await mongoose.connection.close();
        console.log('‚úÖ MongoDB —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');

        console.log('üëã –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        process.exit(0);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã:', error);
        process.exit(1);
    }
};

// ==================== ERROR HANDLERS ====================

// –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ Promise rejections
process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ Promise:', reason);
    console.error('Promise:', promise);
    process.exit(1);
});

// –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
process.on('uncaughtException', (error) => {
    console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
    process.exit(1);
});

// ==================== START APPLICATION ====================

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è graceful shutdown
startServer().then((server) => {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    process.on('SIGTERM', gracefulShutdown(server));
    process.on('SIGINT', gracefulShutdown(server));
});