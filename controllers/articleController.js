// ============================================
// controllers/articleController.js
// ============================================

import articleService from '../services/articleService.js';

class ArticleController {
    async createArticle(req, res) {
        try {
            const authorId = req.user.userId;
            const articleData = req.body;

            const article = await articleService.createArticle(articleData, authorId);

            return res.status(201).json({
                success: true,
                message: '–°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞',
                data: article
            });
        } catch (error) {
            return res.status(400).json({
                success: false,
                message: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏'
            });
        }
    }

    async getArticleById(req, res) {
        try {
            const { id } = req.params;

            const article = await articleService.getArticleById(id);

            return res.status(200).json({
                success: true,
                message: '–°—Ç–∞—Ç—å—è –ø–æ–ª—É—á–µ–Ω–∞',
                data: article
            });

        } catch (error) {
            return res.status(404).json({
                success: false,
                message: error.message || '–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            });
        }
    }

    async getArticleBySlug(req, res) {
        try {
            const { slug } = req.params;

            const article = await articleService.getArticleBySlug(slug);

            return res.status(200).json({
                success: true,
                message: '–°—Ç–∞—Ç—å—è –ø–æ–ª—É—á–µ–Ω–∞',
                data: article
            });

        } catch (error) {
            return res.status(404).json({
                success: false,
                message: error.message || '–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            });
        }
    }

    async updateArticle(req, res) {
        try {
            const { id } = req.params;
            const userId = req.user.userId;
            const updateData = req.body;

            // ‚úÖ –î–û–ë–ê–í–¨ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï:
            console.log('üü° [Backend Controller] updateArticle:', {
                articleId: id,
                userId,
                updateData
            });

            const article = await articleService.updateArticle(id, updateData, userId);

            // ‚úÖ –î–û–ë–ê–í–¨ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –£–°–ü–ï–•–ê:
            console.log('üü° [Backend Controller] –°—Ç–∞—Ç—å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', article._id);

            return res.status(200).json({
                success: true,
                message: '–°—Ç–∞—Ç—å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
                data: article
            });

        } catch (error) {
            // ‚úÖ –î–û–ë–ê–í–¨ –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï:
            console.error('‚ùå [Backend Controller] updateArticle error:', {
                message: error.message,
                stack: error.stack
            });
            return res.status(400).json({
                success: false,
                message: error.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏'
            });
        }
    }

    async deleteArticle(req, res) {
        try {
            const { id } = req.params;
            const userId = req.user.userId;

            const result = await articleService.deleteArticle(id, userId);

            return res.status(200).json({
                success: true,
                message: result.message
            });

        } catch (error) {
            return res.status(400).json({
                success: false,
                message: error.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏'
            });
        }
    }

    async submitForReview(req, res) {
        try {
            const { id } = req.params;
            const userId = req.user.userId;

            const article = await articleService.submitForReview(id, userId);

            return res.status(200).json({
                success: true,
                message: '–°—Ç–∞—Ç—å—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é',
                data: article
            });

        } catch (error) {
            return res.status(400).json({
                success: false,
                message: error.message || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é'
            });
        }
    }

    async approveArticle(req, res) {
        try {
            const { id } = req.params;
            const adminId = req.user.userId;

            const article = await articleService.approveArticle(id, adminId);

            return res.status(200).json({
                success: true,
                message: '–°—Ç–∞—Ç—å—è –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞',
                data: article
            });

        } catch (error) {
            return res.status(400).json({
                success: false,
                message: error.message || '–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏'
            });
        }
    }

    async rejectArticle(req, res) {
        try {
            const { id } = req.params;
            const adminId = req.user.userId;
            const { reason } = req.body;

            const article = await articleService.rejectArticle(id, adminId, reason);

            return res.status(200).json({
                success: true,
                message: '–°—Ç–∞—Ç—å—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞',
                data: article
            });

        } catch (error) {
            return res.status(400).json({
                success: false,
                message: error.message || '–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏'
            });
        }
    }

    async getPublishedArticles(req, res) {
        try {
            const { limit, skip, sortBy, sortOrder } = req.query;

            const options = {
                limit: parseInt(limit) || 20,
                skip: parseInt(skip) || 0,
                sortBy: sortBy || 'publishedAt',
                sortOrder: parseInt(sortOrder) || -1
            };

            const result = await articleService.getPublishedArticles(options);

            return res.status(200).json({
                success: true,
                message: '–°—Ç–∞—Ç—å–∏ –ø–æ–ª—É—á–µ–Ω—ã',
                data: result
            });

        } catch (error) {
            return res.status(400).json({
                success: false,
                message: error.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–µ–π'
            });
        }
    }

    async getArticlesByCategory(req, res) {
        try {
            const { categoryId } = req.params;
            const { limit, skip, sortBy, sortOrder } = req.query;

            const options = {
                limit: parseInt(limit) || 20,
                skip: parseInt(skip) || 0,
                sortBy: sortBy || 'publishedAt',
                sortOrder: parseInt(sortOrder) || -1
            };

            const result = await articleService.getArticlesByCategory(categoryId, options);

            return res.status(200).json({
                success: true,
                message: '–°—Ç–∞—Ç—å–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã',
                data: result
            });

        } catch (error) {
            return res.status(400).json({
                success: false,
                message: error.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
            });
        }
    }

    async getMyArticles(req, res) {
        try {
            const userId = req.user.userId;
            const { status } = req.query;

            const result = await articleService.getArticlesByAuthor(userId, { status });

            return res.status(200).json({
                success: true,
                message: '–ú–æ–∏ —Å—Ç–∞—Ç—å–∏ –ø–æ–ª—É—á–µ–Ω—ã',
                data: result
            });

        } catch (error) {
            return res.status(400).json({
                success: false,
                message: error.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–µ–π –∞–≤—Ç–æ—Ä–∞'
            });
        }
    }


    async getArticlesByAuthor(req, res) {
        try {
            const { authorId } = req.params;
            const { limit, skip, status } = req.query;

            const options = {
                limit: parseInt(limit) || 20,
                skip: parseInt(skip) || 0,
                status: status || null
            };

            const result = await articleService.getArticlesByAuthor(authorId, options);

            return res.status(200).json({
                success: true,
                message: '–°—Ç–∞—Ç—å–∏ –∞–≤—Ç–æ—Ä–∞ –ø–æ–ª—É—á–µ–Ω—ã',
                data: result
            });

        } catch (error) {
            return res.status(400).json({
                success: false,
                message: error.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–µ–π –∞–≤—Ç–æ—Ä–∞'
            });
        }
    }

    async getAllArticlesForAdmin(req, res) {
        try {
            const { limit, skip, sortBy, sortOrder, status, search } = req.query;

            const options = {
                limit: parseInt(limit) || 100,
                skip: parseInt(skip) || 0,
                sortBy: sortBy || 'createdAt',
                sortOrder: parseInt(sortOrder) || -1,
                status: status || null,
                search: search || null
            };

            const result = await articleService.getAllArticlesForAdmin(options);

            return res.status(200).json({
                success: true,
                message: '–í—Å–µ —Å—Ç–∞—Ç—å–∏ –ø–æ–ª—É—á–µ–Ω—ã',
                data: result
            });
        } catch (error) {
            return res.status(400).json({
                success: false,
                message: error.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–µ–π'
            });
        }
    }

    async getPendingArticles(req, res) {
        try {
            const articles = await articleService.getPendingArticles();

            return res.status(200).json({
                success: true,
                message: '–°—Ç–∞—Ç—å–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã',
                data: articles
            });

        } catch (error) {
            return res.status(400).json({
                success: false,
                message: error.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–µ–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏'
            });
        }
    }

    async getPopularArticles(req, res) {
        try {
            const { limit, days } = req.query;

            const articles = await articleService.getPopularArticles(
                parseInt(limit) || 10,
                parseInt(days) || 7
            );

            return res.status(200).json({
                success: true,
                message: '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –ø–æ–ª—É—á–µ–Ω—ã',
                data: articles
            });

        } catch (error) {
            return res.status(400).json({
                success: false,
                message: error.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π'
            });
        }
    }

    async searchArticles(req, res) {
        try {
            const { q, limit, skip } = req.query;

            if (!q) {
                return res.status(400).json({
                    success: false,
                    message: '–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
                });
            }

            const options = {
                limit: parseInt(limit) || 20,
                skip: parseInt(skip) || 0
            };

            const articles = await articleService.searchArticles(q, options);

            return res.status(200).json({
                success: true,
                message: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ–ª—É—á–µ–Ω—ã',
                data: articles
            });

        } catch (error) {
            return res.status(400).json({
                success: false,
                message: error.message || '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π'
            });
        }
    }

    async incrementViews(req, res) {
        try {
            const { id } = req.params;

            await articleService.incrementViews(id);

            return res.status(200).json({
                success: true,
                message: '–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—Å—á–∏—Ç–∞–Ω'
            });

        } catch (error) {
            return res.status(400).json({
                success: false,
                message: error.message || '–û—à–∏–±–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤'
            });
        }
    }

    async getStatistics(req, res) {
        try {
            const stats = await articleService.getStatistics();

            return res.status(200).json({
                success: true,
                message: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞',
                data: stats
            });

        } catch (error) {
            return res.status(400).json({
                success: false,
                message: error.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
            });
        }
    }
}

export default new ArticleController();